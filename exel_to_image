Oui, c'est tout à fait possible de convertir chaque feuille d'un fichier Excel en image sous Linux avec Python. Voici plusieurs approches que vous pouvez utiliser :

## Méthode 1 : Avec pandas + matplotlib (recommandée)

```python
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import numpy as np

def excel_to_images(excel_file, output_dir="output"):
    # Lire toutes les feuilles
    sheets = pd.read_excel(excel_file, sheet_name=None)
    
    for sheet_name, df in sheets.items():
        # Créer une figure
        fig, ax = plt.subplots(figsize=(12, 8))
        ax.axis('tight')
        ax.axis('off')
        
        # Créer un tableau
        table = ax.table(cellText=df.values,
                        colLabels=df.columns,
                        cellLoc='center',
                        loc='center')
        
        # Styliser le tableau
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 1.5)
        
        # Sauvegarder
        plt.savefig(f"{output_dir}/{sheet_name}.png", 
                   bbox_inches='tight', dpi=300)
        plt.close()

# Utilisation
excel_to_images("mon_fichier.xlsx")
```

## Méthode 2 : Avec openpyxl + PIL (pour plus de contrôle)

```python
from openpyxl import load_workbook
from PIL import Image, ImageDraw, ImageFont
import os

def excel_sheet_to_image(sheet, output_path):
    # Calculer les dimensions
    max_row = sheet.max_row
    max_col = sheet.max_column
    
    cell_width = 100
    cell_height = 30
    img_width = max_col * cell_width
    img_height = max_row * cell_height
    
    # Créer l'image
    img = Image.new('RGB', (img_width, img_height), 'white')
    draw = ImageDraw.Draw(img)
    
    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 12)
    except:
        font = ImageFont.load_default()
    
    # Dessiner les cellules
    for row in range(1, max_row + 1):
        for col in range(1, max_col + 1):
            cell = sheet.cell(row=row, column=col)
            x = (col - 1) * cell_width
            y = (row - 1) * cell_height
            
            # Dessiner le rectangle de la cellule
            draw.rectangle([x, y, x + cell_width, y + cell_height], 
                          outline='black', width=1)
            
            # Ajouter le texte
            if cell.value:
                text = str(cell.value)
                draw.text((x + 5, y + 5), text, font=font, fill='black')
    
    img.save(output_path)

def convert_excel_to_images(excel_file, output_dir="output"):
    os.makedirs(output_dir, exist_ok=True)
    wb = load_workbook(excel_file)
    
    for sheet_name in wb.sheetnames:
        sheet = wb[sheet_name]
        output_path = f"{output_dir}/{sheet_name}.png"
        excel_sheet_to_image(sheet, output_path)
        print(f"Feuille '{sheet_name}' convertie en {output_path}")

# Utilisation
convert_excel_to_images("mon_fichier.xlsx")
```

## Installation des dépendances

```bash
pip install pandas matplotlib openpyxl pillow
```

## Méthode 3 : Avec dataframe-image (plus simple)

```bash
pip install dataframe-image
```

```python
import pandas as pd
import dataframe_image as dfi

def excel_to_images_simple(excel_file, output_dir="output"):
    sheets = pd.read_excel(excel_file, sheet_name=None)
    
    for sheet_name, df in sheets.items():
        output_path = f"{output_dir}/{sheet_name}.png"
        dfi.export(df, output_path)
        print(f"Feuille '{sheet_name}' sauvegardée comme {output_path}")

excel_to_images_simple("mon_fichier.xlsx")
```

## Conseils pratiques

- La méthode 1 avec matplotlib est la plus flexible pour le styling
- La méthode 2 avec PIL donne plus de contrôle sur le rendu pixel par pixel
- La méthode 3 avec dataframe-image est la plus simple mais moins customisable
- Ajustez les paramètres `figsize`, `dpi`, et `fontsize` selon vos besoins
- Pour de gros fichiers Excel, considérez traiter les feuilles par chunks

Quelle méthode préférez-vous tester en premier ?