# ============================================================
# ðŸ“„  AJOUT â€“ connexion Ã  la table `emails` + pagination (100)
# ============================================================

# --- 1. VÃ©rifier / crÃ©er les colonnes dans la table `emails`
with sqlite3.connect(db_path) as _conn:
    _c = _conn.cursor()
    for col in ("prediction", "eval_status", "eval_comment"):
        try:
            _c.execute(f"ALTER TABLE emails ADD COLUMN {col} TEXT")
        except sqlite3.OperationalError:
            pass                                     # colonne dÃ©jÃ  lÃ 
    _conn.commit()

PAGE_SIZE   = 100                           # mails / page
page_state  = gr.State(0)                   # page courante
row_state   = gr.State(None)                # rowid mail choisi

# --- 2. Navigation (PrÃ©cÃ©dent / Suivant) + dropdown ----------
with gr.Row():
    prev_btn   = gr.Button("â—€ PrÃ©cÃ©dent")
    page_lbl   = gr.Markdown()
    next_btn   = gr.Button("Suivant â–¶")

mail_selector = gr.Dropdown(label="Mails (subject â€“ motif)")

def _choices(page: int):
    """Retourne le gr.update pour le dropdown."""
    off = page * PAGE_SIZE
    query = """
        SELECT rowid, subject,
               [Motifs Collaborateurs (libellÃ© en FR)] AS motif
        FROM emails LIMIT ? OFFSET ?
    """
    with sqlite3.connect(db_path) as conn:
        df = pd.read_sql_query(query, conn, params=(PAGE_SIZE, off))
    choices = [
        f"{r.rowid} â€“ {r.subject} â€“ {r.motif}"
        for r in df.itertuples()
    ]
    return gr.update(choices=choices, value=None)

# total & max page
with sqlite3.connect(db_path) as _c:
    nb = _c.execute("SELECT COUNT(*) FROM emails").fetchone()[0]
max_page = (nb - 1) // PAGE_SIZE

# init
mail_selector.update(**_choices(0))
page_lbl.update(f"PageÂ 1/{max_page+1}")

# â¬… / âž¡ callbacks
def _nav(cur: int, delta: int):
    new = max(0, min(max_page, cur + delta))
    return new, _choices(new), f"PageÂ {new+1}/{max_page+1}"

prev_btn.click(lambda cur: _nav(cur, -1),
               inputs=[page_state],
               outputs=[page_state, mail_selector, page_lbl])

next_btn.click(lambda cur: _nav(cur, 1),
               inputs=[page_state],
               outputs=[page_state, mail_selector, page_lbl])

# --- 3. Charger le mail sÃ©lectionnÃ© --------------------------
def _load(choice: str):
    if not choice:
        return gr.update(), None
    rid = int(choice.split(" â€“ ")[0])
    with sqlite3.connect(db_path) as conn:
        body = pd.read_sql_query(
            "SELECT message_clean FROM emails WHERE rowid = ?",
            conn, params=(rid,)
        ).iloc[0, 0]
    return gr.update(value=body), rid

mail_selector.change(_load,
                     inputs=[mail_selector],
                     outputs=[email_input, row_state])

# --- 4. AprÃ¨s clic Â«Â Enregistrer l'Ã©valuationÂ Â» ---------------
def _save_in_emails(rid, pred, eval_, comm):
    if rid is None:
        return
    with sqlite3.connect(db_path) as conn:
        conn.execute(
            "UPDATE emails SET prediction=?, eval_status=?, "
            "eval_comment=? WHERE rowid=?",
            (pred, eval_, comm, rid)
        )
        conn.commit()

evaluation_button.then(
    fn=_save_in_emails,
    inputs=[row_state, output_prediction_hidden, evaluation, comment],
    outputs=[]
)

#############EDIT##################

# -- initialisation sans .update() -----------------------------
init_choices = [f"{i} â€“ {s}" for i, s in fetch_choices(0)]
mail_selector.choices = init_choices        # <- on fixe directement l'attribut
page_lbl.value = f"PageÂ 1/{max_page+1}"     # <- idem pour le Markdown

# ------------------------------------------------------------------
# Helper pagination â†’ retourne la liste de sujets Ã  afficher
# ------------------------------------------------------------------
def fetch_choices(page: int = 0, page_size: int = PAGE_SIZE):
    """
    RÃ©cupÃ¨re PAGE_SIZE lignes (subject + motif) de la table `emails`
    pour la page demandÃ©e, et renvoie une liste de chaÃ®nes prÃªtes
    pour le Dropdown : "rowid â€“ subject â€“ motif".
    """
    offset = page * page_size

    query = """
        SELECT
            rowid,
            subject,
            [Motifs Collaborateurs (libellÃ© en FR)] AS motif
        FROM emails
        LIMIT ? OFFSET ?
    """

    with sqlite3.connect(db_path) as conn:
        df = pd.read_sql_query(query, conn, params=(page_size, offset))

    return [
        f"{int(r.rowid)} â€“ {r.subject} â€“ {r.motif}"
        for r in df.itertuples()
    ]
