# email_classification_app.py
"""
Gradio – Classification & Évaluation de mails **(LLM + Haystack)**
=================================================================

### Nouveauté : pagination des exemples
Vous pouvez désormais parcourir **tous** les mails, 100 par page, grâce aux boutons « ◀ Précédent / Suivant ». Le dropdown se met à jour avec le sujet (ou le début du corps) des mails de la page courante.

---
```bash
pip install gradio pandas openpyxl haystack-ai openai python-dotenv httpx sqlite-utils
```
"""

from __future__ import annotations

import os
import re
import sqlite3
from pathlib import Path
from typing import List, Tuple

import gradio as gr
import httpx
import openai
import pandas as pd
from dotenv import load_dotenv
from haystack import Document
from haystack.components.builders.chat_prompt_builder import ChatPromptBuilder
from haystack.components.embedders.openai_document_embedder import OpenAIDocumentEmbedder
from haystack.components.embedders.openai_text_embedder import OpenAITextEmbedder
from haystack.dataclasses.chat_message import ChatMessage
from haystack.document_stores.in_memory import InMemoryDocumentStore
from haystack.document_stores.types import DuplicatePolicy

# ---------------------------------------------------------------------------
# 0. Configuration & constantes
# ---------------------------------------------------------------------------
DB_PATH = Path("emails.db")
EXCEL_MAILS_PATH = Path("/mnt/data/mails_corpo/mails_15k.xlsx")
EXCEL_EXAMPLES_PATH = Path("/mnt/data/mails_corpo/cheque.xlsx")
SHEET_EXAMPLES = "Exemples par Motif"

EMBEDDER_URL = os.getenv("EMEDDER_URL") or "https://…/Embedding/v1"
LLM_URL = os.getenv("LLM_URL") or "https://…/tgi-qwen/v1"

PAGE_SIZE = 100  # <- mails affichés par page dans le sélecteur

# Colonnes ajoutées au besoin
EXTRA_COLS = ["prediction", "eval_status", "eval_comment"]

# ---------------------------------------------------------------------------
# 1. Import unique Excel ➜ SQLite
# ---------------------------------------------------------------------------
def import_mails_once() -> None:
    if DB_PATH.exists():
        return
    if not EXCEL_MAILS_PATH.exists():
        raise FileNotFoundError(f"Excel source manquant : {EXCEL_MAILS_PATH}")
    df = pd.read_excel(EXCEL_MAILS_PATH)
    df.columns = [re.sub(r"\s+", "_", c).lower() for c in df.columns]
    for col in EXTRA_COLS:
        df[col] = df.get(col, None)
    with sqlite3.connect(DB_PATH) as conn:
        df.to_sql("emails", conn, if_exists="replace", index=False)

# ---------------------------------------------------------------------------
# 2. Examples & retrieval init (Haystack)
# ---------------------------------------------------------------------------
print("⏳ Init exemples…")
df_ex = pd.read_excel(EXCEL_EXAMPLES_PATH, sheet_name=SHEET_EXAMPLES)
example_docs = [Document(content=r["Exemple"], meta={"categorie": r["Motif"]}) for _, r in df_ex.iterrows()]

guide_df = pd.read_excel(EXCEL_EXAMPLES_PATH).iloc[1:, 1:]
headers = guide_df.iloc[0]
cat_df = guide_df[1:]
cat_df.columns = headers
CAT2CTX = {r["Motif"]: {"definition": r["Définition"]} for _, r in cat_df.iterrows()}
CATEGORIES = list(CAT2CTX.keys())

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY") or "None"

embedder = OpenAIDocumentEmbedder(model="mistral", api_base_url=EMBEDDER_URL, http_client_kwargs={"verify": False})
example_docs = embedder.run(documents=example_docs)["documents"]
STORE = InMemoryDocumentStore(embedding_similarity_function="cosine")
STORE.write_documents(example_docs, policy=DuplicatePolicy.SKIP)
TEXT_EMB = OpenAITextEmbedder(model="embedding", api_base_url=EMBEDDER_URL, prefix="Instruct: Given an email, determine its email\nQuery: ", http_client_kwargs={"verify": False})
PROMPT_BUILDER = ChatPromptBuilder(template=[ChatMessage.from_user("""# Role\nCatégorisez l'e‑mail:\n{% for c in categories %}- {{c['category']}} : {{c['definition']}}{% endfor %}\n\nExemples:\n{% for ex in exs %}- {{ex['example']}} → {{ex['category']}}{% endfor %}\n\nE‑mail: {{email}}""")])
CLIENT = openai.OpenAI(api_key="None", base_url=LLM_URL, http_client=httpx.Client(verify=False))

# ---------------------------------------------------------------------------
# 3. DB helpers + pagination
# ---------------------------------------------------------------------------

def fetch_choices(page: int = 0, page_size: int = PAGE_SIZE) -> List[Tuple[int, str]]:
    offset = page * page_size
    query = "SELECT rowid AS id, subject, message_clean FROM emails LIMIT ? OFFSET ?"
    with sqlite3.connect(DB_PATH) as conn:
        df = pd.read_sql_query(query, conn, params=(page_size, offset))
    choices = []
    for r in df.itertuples():
        subj = r.subject if pd.notna(r.subject) else (r.message_clean or "")[:40] + "…"
        choices.append((int(r.id), subj))
    return choices


def total_rows() -> int:
    with sqlite3.connect(DB_PATH) as conn:
        return conn.execute("SELECT COUNT(*) FROM emails").fetchone()[0]

# saving helpers

def save_prediction(rid: int, pred: str):
    with sqlite3.connect(DB_PATH) as c:
        c.execute("UPDATE emails SET prediction=? WHERE rowid=?", (pred, rid)); c.commit()

def save_evaluation(rid: int, st: str, comm: str):
    with sqlite3.connect(DB_PATH) as c:
        c.execute("UPDATE emails SET eval_status=?, eval_comment=? WHERE rowid=?", (st, comm, rid)); c.commit()

# ---------------------------------------------------------------------------
# 4. Retrieval + classification
# ---------------------------------------------------------------------------

def retrieve_examples(email: str, k: int = 20, per_cat: int = 5):
    emb = TEXT_EMB.run(text=email)["embedding"]
    hits = STORE.embedding_retrieval(query_embedding=emb, top_k=k)
    by_cat, cats_set = {}, set()
    for d in hits:
        c = d.meta["categorie"]; cats_set.add(c); by_cat.setdefault(c, []).append(d.content)
    exs = [{"example": e, "category": c} for c, lst in by_cat.items() for e in lst[:per_cat]]
    cats = [{"category": c, "definition": CAT2CTX[c]["definition"]} for c in cats_set]
    return exs, cats


def classify(email: str):
    exs, cats = retrieve_examples(email)
    msgs = PROMPT_BUILDER.run(categories=cats, exs=exs, email=email)["prompt"]
    resp = CLIENT.chat.completions.create(model="", messages=[m.to_openai_dict_format() for m in msgs], temperature=0, max_tokens=50)
    label = resp.choices[0].message.content.strip()
    if label not in CATEGORIES:
        import difflib; label = difflib.get_close_matches(label, CATEGORIES, n=1) or ["Autre"]
        label = label[0]
    return label

# ---------------------------------------------------------------------------
# 5. UI avec pagination
# ---------------------------------------------------------------------------

def build_ui() -> gr.Blocks:
    total = total_rows()
    max_page = (total - 1) // PAGE_SIZE
    with gr.Blocks() as demo:
        gr.Markdown("## Parcours des mails (pagination 100) → Classification → Évaluation")

        page_state = gr.State(value=0)  # page courante
        sel_id = gr.State(value=None)
        eval_state = gr.State(value=None)

        with gr.Row():
            prev_btn = gr.Button("◀ Précédent")
            page_label = gr.Markdown()
            next_btn = gr.Button("Suivant ▶")

        dropdown = gr.Dropdown(label="Mails sur la page", interactive=True)
        mail_box = gr.Textbox(label="message_clean", interactive=False, lines=12)
        classify_btn = gr.Button("Classifier", variant="primary")
        pred_html = gr.HTML()

        gr.Markdown("### Évaluation")
        with gr.Row():
            valider = gr.Button("Valider")
            invalider = gr.Button("Invalider", variant="stop")
        comment_box = gr.Textbox(label="Commentaire", lines=3)
        save_btn = gr.Button("Enregistrer l’évaluation")
        save_msg = gr.Markdown()

        # helpers UI
        def update_dropdown(page: int):
            choices = [f"{i} – {s}" for i, s in fetch_choices(page)]
            label = f"Page {page+1}/{max_page+1} · {len(choices)} mails"
            return gr.update(choices=choices, value=None), label

        # initial fill
        dd, lbl = update_dropdown(0)
        dropdown.update(**dd)
        page_label.update(lbl)

        # navigation callbacks
        def change_page(delta: int, cur: int):
            new = max(0, min(max_page, cur + delta))
            dd, lbl = update_dropdown(new)
            return new, dd, lbl, gr.update(value=""), None  # reset mail & id

        prev_btn.click(change_page, [-1, page_state], [page_state, dropdown, page_label, mail_box, sel_id])
        next_btn.click(change_page, [1, page_state], [page_state, dropdown, page_label, mail_box, sel_id])

        # selecting mail
        def on_select(choice: str):
            if not choice:
                return "", None
            rid = int(choice.split(" – ")[0])
            with sqlite3.connect(DB_PATH) as conn:
                mail = pd.read_sql_query("SELECT message_clean FROM emails WHERE rowid=?", conn, params=(rid,)).iloc[0, 0]
            return mail, rid

        dropdown.change(on_select, dropdown, [mail_box, sel_id])

        # classification
        def on_classify(text: str, rid: int | None):
            if not text:
                return "<vide>"
            pred = classify(text)
            if rid:
                save_prediction(rid, pred)
            return f"<div style='font-size:22px;font-weight:bold;text-align:center'>{pred}</div>"

        classify_btn.click(on_classify, [mail_box, sel_id], pred_html)

        # eval buttons
        valider.click(lambda: "valider", None, eval_state)
        invalider.click(lambda: "invalider", None, eval_state)

        def on_save(rid: int | None, st: str | None, comm: str):
            if rid is None:
                return "❌ Choisissez un mail."
            if st not in {"valider", "invalider"}:
                return "❌ Sélectionnez Valider/Invalider."
            save_evaluation(rid, st, comm)
            return "✅ Évaluation enregistrée"

        save_btn.click(on_save, [sel_id, eval_state, comment_box], save_msg)

    return demo

# ---------------------------------------------------------------------------
# 6. Main
# ---------------------------------------------------------------------------

def main():
    import_mails_once()
    build_ui().launch(server_name="0.0.0.0", server_port=8888)


if __name__ == "__main__":
    main()
