from pathlib import Path
from PIL import Image
from pdf2image import convert_from_path, pdfinfo_from_path
import base64, io, mimetypes

# ------------------------------------------------------------------
# 0) Dossier racine des pièces jointes
# ------------------------------------------------------------------
BASE_DIR = Path("/mnt/data/mails_corpo/get-documents")

# ------------------------------------------------------------------
# 1) Fonctions utilitaires (inchangées sauf 1re ligne = résolution du chemin)
# ------------------------------------------------------------------
def _resolve(path, base_dir=BASE_DIR):
    """
    - Si `path` est déjà absolu        → on le renvoie tel quel.
    - Sinon                            → on le préfixe par `base_dir`.
    Retourne l’objet `Path` absolu.
    """
    p = Path(path)
    return p if p.is_absolute() else base_dir / p


def img_file_to_data_uri(path, jpg_quality=85, thumb_max_px=1024):
    path = _resolve(path)                               # <<< ajout
    mime = mimetypes.guess_type(path)[0] or "image/png"
    img = Image.open(path)

    if thumb_max_px:
        img.thumbnail((thumb_max_px, thumb_max_px))

    buf = io.BytesIO()
    save_fmt = "JPEG" if mime.endswith("jpeg") else "PNG"
    img.save(buf, format=save_fmt, quality=jpg_quality if save_fmt == "JPEG" else None)

    b64 = base64.b64encode(buf.getvalue()).decode("ascii")
    return f"data:{mime};base64,{b64}"


def pdf_to_data_uris(path, dpi=300, fmt="JPEG", jpg_quality=85, thumb_max_px=1024):
    path = _resolve(path)                               # <<< ajout
    nb_pages = pdfinfo_from_path(path)["Pages"]
    mime = f"image/{fmt.lower()}"
    uris = []

    for p in range(1, nb_pages + 1):
        page = convert_from_path(path, dpi=dpi, fmt=fmt.lower(),
                                 first_page=p, last_page=p)[0]
        if thumb_max_px:
            page.thumbnail((thumb_max_px, thumb_max_px))

        buf = io.BytesIO()
        page.save(buf, format=fmt, quality=jpg_quality if fmt == "JPEG" else None)
        b64 = base64.b64encode(buf.getvalue()).decode("ascii")
        uris.append(f"data:{mime};base64,{b64}")

    return uris


def attachment_to_data_uris(path):
    """
    Routeur : choisit la bonne fonction suivant l’extension.
    • Renvoie [] si le type n’est pas géré.
    """
    p = _resolve(path)                                  # <<< ajout
    ext = p.suffix.lower()

    if ext in {".png", ".jpg", ".jpeg", ".bmp", ".gif", ".tiff"}:
        return [img_file_to_data_uri(p)]
    elif ext == ".pdf":
        return pdf_to_data_uris(p)
    else:
        return []


# ------------------------------------------------------------------
# 2) Intégration dans le pipeline DataFrame (= aucune modif nécessaire)
# ------------------------------------------------------------------
def enrich_df_with_base64(df, pj_col="pj", new_col="pj_b64"):
    def encode_row(pj_list):
        out = []
        for pj in pj_list or []:
            out += attachment_to_data_uris(pj)     # <<< pj peut être juste "monfichier.pdf"
        return out

    df[new_col] = df[pj_col].apply(encode_row)
    return df
